plugins {
    id 'idea'
    id 'java'
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.10.1'
    id 'org.hidetake.ssh' version "2.11.2"
}

group = "org.faystmax"
version = version

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

wrapper {
    gradleVersion = '8.6'
    distributionType = Wrapper.DistributionType.ALL
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.telegram:telegrambots:6.9.7.1'
    implementation 'ch.qos.logback:logback-classic:1.5.2'


    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
}

test {
    useJUnitPlatform()
}

application {
    mainClass = 'org.faystmax.compliment.bot.ComplimentBotApplication'
}

graalvmNative {
    toolchainDetection = true
    agent {
        defaultMode = "standard"

        metadataCopy {
            mergeWithExisting = false
        }
    }
    binaries {
        main {
            imageName = "compliment-bot"
            useFatJar = true
            runtimeArgs.add("-march=compatibility")
        }
    }
}

tasks.register('buildDockerImage') {
    doLast {
        exec {
            workingDir "${projectDir}"
            commandLine 'cmd', '/c', "docker build -t ${project.name}:${version} . "
        }
    }
}

tasks.register('deploy') {
    remotes {
        vds {
            host = remoteHostComplimentBot
            user = remoteUserComplimentBot
            password = remotePasswordComplimentBot
            knownHosts = allowAnyHosts
        }
    }
    dependsOn tasks.buildDockerImage
    doLast {
        exec {
            workingDir "${projectDir}"
            commandLine 'cmd', '/c', "docker save -o ${project.layout.buildDirectory.get()}/${project.name}-${version}.tar ${project.name}:${version}"
        }
    }
    ssh.run {
        session(remotes.vds) {
            put from: "${project.layout.buildDirectory.get()}/${project.name}-${version}.tar", into: "./"
            executeSudo "docker load -i ${project.name}-${version}.tar", pty: true
            executeSudo "service compliment-bot restart", pty: true
        }
    }
}